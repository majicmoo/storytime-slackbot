{"version":3,"sources":["graph/DraggableDiv.tsx","graph/Node.tsx","graph/Verb.tsx","graph/Option.tsx","graph/Line.tsx","Lines.tsx","graph/GraphTab.tsx","JsonTab.tsx","StoryUpdater.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DraggableDiv","props","ref","createRef","startDragging","e","console","log","current","setState","dragging","relX","pageX","offsetLeft","relY","pageY","offsetTop","stopDragging","drag","x","state","y","onUpdatePosition","this","document","addEventListener","removeEventListener","children","className","style","left","top","onMouseDown","React","Component","NodeComponent","node","updateNode","addOption","addOrUpdateNodeTracker","updatedX","updatedY","id","value","statement","onChange","target","type","onClick","VerbComponent","verb","addVerb","Option","addNode","option","updateOption","item","event","Verb","Line","x1","y1","x2","y2","width","height","stroke","Lines","nodeTracker","story","lines","calcLinesFromNodes","otherLines","calcLinesFromStoryOptions","map","line","index","key","flatMap","trackedNode","options","find","o","stuff","listenId","push","aaa","lookId","smellId","tasteId","touchId","filter","n","undefined","parentNodeTracker","found","makeLine","nodes","what","optionIds","oid","trackedOption","GraphTab","updateTitle","title","Node","JsonTab","JSON","stringify","uuidv4","updatedNodes","optionIndex","findIndex","updatedOption","update","nodeId","optionId","updatedNode","updatedOptions","nodeIndex","App","tab","updateTab","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0d76c8ea.chunk.js","sourcesContent":["import React, { createRef, RefObject, ReactNode } from \"react\";\r\n\r\ninterface DraggableDivProps {\r\n  x: number;\r\n  y: number;\r\n  children: ReactNode;\r\n  className: string;\r\n  onUpdatePosition(x: number, y: number): void;\r\n}\r\n\r\ninterface DraggableDivState {\r\n  x: number;\r\n  y: number;\r\n  dragging: boolean;\r\n  relX: number;\r\n  relY: number;\r\n}\r\n\r\nclass DraggableDiv extends React.Component<\r\n  DraggableDivProps,\r\n  DraggableDivState\r\n> {\r\n  private ref: RefObject<HTMLDivElement> = createRef();\r\n  constructor(props: DraggableDivProps) {\r\n    super(props);\r\n    this.state = { x: props.x, y: props.y, dragging: false, relX: 0, relY: 0 };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this.props.onUpdatePosition(this.props.x, this.props.y);\r\n  }\r\n\r\n  public componentDidUpdate(\r\n    props: DraggableDivProps,\r\n    state: DraggableDivState\r\n  ) {\r\n    if (this.state.dragging && !state.dragging) {\r\n      document.addEventListener(\"mousemove\", this.drag);\r\n      document.addEventListener(\"mouseup\", this.stopDragging);\r\n    } else if (!this.state.dragging && state.dragging) {\r\n      document.removeEventListener(\"mousemove\", this.drag);\r\n      document.removeEventListener(\"mouseup\", this.stopDragging);\r\n    }\r\n  }\r\n\r\n  private startDragging = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    console.log(\"click\");\r\n    if (this.ref.current) {\r\n      this.setState({\r\n        dragging: true,\r\n        relX: e.pageX - this.ref.current.offsetLeft,\r\n        relY: e.pageY - this.ref.current.offsetTop\r\n      });\r\n    }\r\n  };\r\n\r\n  private stopDragging = () => {\r\n    this.setState({ dragging: false });\r\n  };\r\n\r\n  private drag = (e: MouseEvent) => {\r\n    const x = e.pageX - this.state.relX;\r\n    const y = e.pageY - this.state.relY;\r\n    if (this.state.dragging) {\r\n      this.setState({ x, y });\r\n      this.props.onUpdatePosition(x, y);\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    const { children, className } = this.props;\r\n    const { x, y } = this.state;\r\n\r\n    return (\r\n      <div\r\n        className={className}\r\n        style={{ left: `${x}px`, top: `${y}px` }}\r\n        onMouseDown={this.startDragging}\r\n        ref={this.ref}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DraggableDiv;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { Node } from \"../types\";\r\n\r\nimport DraggableDiv from \"./DraggableDiv\";\r\n\r\ninterface NodeProps {\r\n  node: Node;\r\n  updateNode(node: Node): void;\r\n  addOption(nodeId: string): void;\r\n  addOrUpdateNodeTracker(\r\n    id: string,\r\n    type: \"Node\" | \"StoryOption\",\r\n    x: number,\r\n    y: number\r\n  ): void;\r\n\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst NodeComponent: FunctionComponent<NodeProps> = ({\r\n  node,\r\n  updateNode,\r\n  addOption,\r\n  x,\r\n  y,\r\n  addOrUpdateNodeTracker\r\n}) => (\r\n  <DraggableDiv\r\n    className=\"node\"\r\n    x={x}\r\n    y={y}\r\n    onUpdatePosition={(updatedX, updatedY) =>\r\n      addOrUpdateNodeTracker(node.id, \"Node\", updatedX, updatedY)\r\n    }\r\n  >\r\n    <input\r\n      value={node.statement}\r\n      onChange={e => updateNode({ ...node, statement: e.target.value })}\r\n    />\r\n    <p>{node.type}</p>\r\n    <button onClick={() => addOption(node.id)}>Add Option</button>\r\n  </DraggableDiv>\r\n);\r\n\r\nexport default NodeComponent;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { Verb } from \"../types\";\r\n\r\ninterface VerbProps {\r\n  verb: Verb;\r\n  addVerb(verb: Verb): void;\r\n}\r\n\r\nconst VerbComponent: FunctionComponent<VerbProps> = ({ verb, addVerb }) => (\r\n  <div className=\"verb\">\r\n    <p>{verb}</p>\r\n    <button onClick={() => addVerb(verb)}>+</button>\r\n  </div>\r\n);\r\n\r\nexport default VerbComponent;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { StoryOption, Verb } from \"../types\";\r\nimport DraggableDiv from \"./DraggableDiv\";\r\nimport VerbComponent from \"./Verb\";\r\n\r\ninterface OptionProps {\r\n  option: StoryOption;\r\n  updateOption(option: StoryOption): void;\r\n  addOrUpdateNodeTracker(\r\n    id: string,\r\n    type: \"Node\" | \"StoryOption\",\r\n    x: number,\r\n    y: number\r\n  ): void;\r\n  addNode(option: StoryOption, verb: Verb): void;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nclass Option extends React.Component<OptionProps> {\r\n  private addNode = (verb: Verb) => this.props.addNode(this.props.option, verb);\r\n\r\n  public render() {\r\n    const { option, updateOption, x, y, addOrUpdateNodeTracker } = this.props;\r\n    return (\r\n      <DraggableDiv\r\n        className=\"option\"\r\n        x={x}\r\n        y={y}\r\n        onUpdatePosition={(updatedX, updatedY) =>\r\n          addOrUpdateNodeTracker(option.id, \"StoryOption\", updatedX, updatedY)\r\n        }\r\n      >\r\n        <p>Option</p>\r\n        <input\r\n          value={option.item}\r\n          onChange={event =>\r\n            updateOption({ ...option, item: event.target.value })\r\n          }\r\n        />\r\n        <div className=\"verbs\">\r\n          <VerbComponent verb=\"taste\" addVerb={this.addNode} />\r\n          <VerbComponent verb=\"touch\" addVerb={this.addNode} />\r\n          <VerbComponent verb=\"smell\" addVerb={this.addNode} />\r\n          <VerbComponent verb=\"look\" addVerb={this.addNode} />\r\n          <VerbComponent verb=\"listen\" addVerb={this.addNode} />\r\n        </div>\r\n      </DraggableDiv>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Option;\r\n","import React, { FunctionComponent } from \"react\";\r\n\r\ninterface LineProps {\r\n  x1: number;\r\n  y1: number;\r\n  x2: number;\r\n  y2: number;\r\n}\r\n\r\nconst Line: FunctionComponent<LineProps> = ({ x1, y1, x2, y2 }) => (\r\n  <svg width=\"500\" height=\"500\" className=\"line-wrapper\">\r\n    <line x1={x1} y1={y1} x2={x2} y2={y2} className=\"line\" stroke=\"black\" />\r\n  </svg>\r\n);\r\n\r\nexport default Line;\r\n","import React from \"react\";\r\nimport Line from \"./graph/Line\";\r\nimport { NodeTracker, Story, Node } from \"./types\";\r\n\r\ninterface LinesProps {\r\n  nodeTracker: NodeTracker[];\r\n  story: Story;\r\n}\r\n\r\nclass Lines extends React.Component<LinesProps> {\r\n  public render() {\r\n    const { nodeTracker, story } = this.props;\r\n    const lines = calcLinesFromNodes(nodeTracker, story);\r\n    const otherLines = calcLinesFromStoryOptions(nodeTracker, story);\r\n\r\n    return (\r\n      <>\r\n        {lines.map((line, index) => (\r\n          <Line {...line} key={`line-${index}`} />\r\n        ))}\r\n        {otherLines.map((line, index) => (\r\n          <Line {...line} key={`other-lines-${index}`} />\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Lines;\r\n\r\ninterface LineType {\r\n  x1: number;\r\n  y1: number;\r\n  x2: number;\r\n  y2: number;\r\n}\r\n\r\nconst calcLinesFromStoryOptions = (\r\n  nodeTracker: NodeTracker[],\r\n  story: Story\r\n): LineType[] =>\r\n  nodeTracker\r\n    .flatMap(trackedNode => {\r\n      const option = story.options.find(o => o.id === trackedNode.id);\r\n      if (option) {\r\n        const stuff = [];\r\n        if (option.listenId) {\r\n          stuff.push(aaa(option.listenId, nodeTracker, trackedNode));\r\n        }\r\n        if (option.lookId) {\r\n          stuff.push(aaa(option.lookId, nodeTracker, trackedNode));\r\n        }\r\n        if (option.smellId) {\r\n          stuff.push(aaa(option.smellId, nodeTracker, trackedNode));\r\n        }\r\n        if (option.tasteId) {\r\n          stuff.push(aaa(option.tasteId, nodeTracker, trackedNode));\r\n        }\r\n        if (option.touchId) {\r\n          stuff.push(aaa(option.touchId, nodeTracker, trackedNode));\r\n        }\r\n\r\n        return stuff;\r\n      }\r\n    })\r\n    .filter(n => n !== undefined) as any;\r\n\r\nconst aaa = (\r\n  id: string,\r\n  nodeTracker: NodeTracker[],\r\n  parentNodeTracker: NodeTracker\r\n): LineType | undefined => {\r\n  const found = nodeTracker.find(n => n.id === id);\r\n  return found ? makeLine(parentNodeTracker, found) : undefined;\r\n};\r\n\r\nconst calcLinesFromNodes = (\r\n  nodeTracker: NodeTracker[],\r\n  story: Story\r\n): LineType[] =>\r\n  nodeTracker\r\n    .flatMap(trackedNode => {\r\n      const node = story.nodes.find(n => n.id === trackedNode.id);\r\n      if (node) {\r\n        return what(nodeTracker, node, trackedNode);\r\n      }\r\n    })\r\n    .filter(n => n !== undefined) as any;\r\n\r\nconst what = (\r\n  nodeTracker: NodeTracker[],\r\n  node: Node,\r\n  trackedNode: NodeTracker\r\n): LineType[] => {\r\n  const options: NodeTracker[] = node.optionIds\r\n    .map(oid => nodeTracker.find(n => n.id === oid))\r\n    .filter(n => n !== undefined) as any;\r\n  return options.map(o => makeLine(trackedNode, o));\r\n};\r\n\r\nconst makeLine = (trackedNode: NodeTracker, trackedOption: NodeTracker) => ({\r\n  x1: trackedNode.x,\r\n  y1: trackedNode.y,\r\n  x2: trackedOption.x,\r\n  y2: trackedOption.y\r\n});\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { Story, Node, StoryOption, NodeTracker, Verb } from \"../types\";\r\nimport NodeComponent from \"./Node\";\r\nimport Option from \"./Option\";\r\n\r\nimport \"./graph.css\";\r\nimport Line from \"./Line\";\r\nimport Lines from \"../Lines\";\r\n\r\ninterface GraphTabProps {\r\n  story: Story;\r\n  nodeTracker: NodeTracker[];\r\n  updateTitle(title: string): void;\r\n  updateNode(node: Node): void;\r\n  addOption(nodeId: string): void;\r\n  addNode(option: StoryOption, verb: Verb): void;\r\n  updateOption(option: StoryOption): void;\r\n  addOrUpdateNodeTracker(\r\n    id: string,\r\n    type: \"Node\" | \"StoryOption\",\r\n    x: number,\r\n    y: number\r\n  ): void;\r\n}\r\n\r\nconst GraphTab: FunctionComponent<GraphTabProps> = ({\r\n  story,\r\n  nodeTracker,\r\n  updateTitle,\r\n  updateNode,\r\n  updateOption,\r\n  addOrUpdateNodeTracker,\r\n  addOption,\r\n  addNode\r\n}) => (\r\n  <div>\r\n    <input\r\n      value={story.title}\r\n      onChange={event => updateTitle(event.target.value)}\r\n    />\r\n    {story.nodes.map((node, index) => (\r\n      <NodeComponent\r\n        key={node.id}\r\n        node={node}\r\n        addOption={addOption}\r\n        updateNode={updateNode}\r\n        addOrUpdateNodeTracker={addOrUpdateNodeTracker}\r\n        x={index}\r\n        y={index}\r\n      />\r\n    ))}\r\n\r\n    {story.options.map((option, index) => (\r\n      <Option\r\n        option={option}\r\n        key={option.id}\r\n        updateOption={updateOption}\r\n        addOrUpdateNodeTracker={addOrUpdateNodeTracker}\r\n        addNode={addNode}\r\n        x={index}\r\n        y={index}\r\n      />\r\n    ))}\r\n    <Lines story={story} nodeTracker={nodeTracker} />\r\n  </div>\r\n);\r\n\r\nexport default GraphTab;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { Story } from \"./types\";\r\n\r\ninterface JsonTabProps {\r\n  story: Story;\r\n}\r\n\r\nconst JsonTab: FunctionComponent<JsonTabProps> = story => (\r\n  <div>\r\n    <p>{JSON.stringify(story)}</p>\r\n  </div>\r\n);\r\n\r\nexport default JsonTab;\r\n","import { Story, Node, StoryOption, Verb } from \"./types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { update } from \"ramda\";\r\n\r\nexport const addNode = (\r\n  story: Story,\r\n  option: StoryOption,\r\n  verb: Verb\r\n): Story => {\r\n  const nodes = story.nodes;\r\n  const id = uuidv4();\r\n  const updatedNodes: Node[] = [\r\n    ...nodes,\r\n    { type: \"Normal\", statement: \"\", id, optionIds: [] }\r\n  ];\r\n\r\n  const optionIndex = story.options.findIndex(o => o.id === option.id);\r\n  const updatedOption: StoryOption = {\r\n    ...option,\r\n    ...(verb === \"taste\" && { tasteId: id }),\r\n    ...(verb === \"touch\" && { touchId: id }),\r\n    ...(verb === \"listen\" && { listenId: id }),\r\n    ...(verb === \"look\" && { lookId: id }),\r\n    ...(verb === \"smell\" && { smellId: id })\r\n  };\r\n\r\n  const options = update(optionIndex, updatedOption, story.options);\r\n\r\n  return { ...story, nodes: updatedNodes, options };\r\n};\r\n\r\nexport const addOption = (story: Story, nodeId: string): Story => {\r\n  const optionId = uuidv4();\r\n  const options = story.options;\r\n  const node = story.nodes.find(n => n.id === nodeId)!!; // TODO\r\n  const updatedNode = { ...node, optionIds: [...node.optionIds, optionId] };\r\n  const updatedOptions = [...options, { id: optionId, item: \"\" }];\r\n  return { ...updateNode(story, updatedNode), options: updatedOptions };\r\n};\r\n\r\nexport const updateNode = (story: Story, node: Node): Story => {\r\n  const nodes = story.nodes;\r\n  const nodeIndex = nodes.findIndex(n => n.id === node.id);\r\n  const updatedNodes = update(nodeIndex, node, nodes);\r\n  return { ...story, nodes: updatedNodes };\r\n};\r\n\r\nexport const updateOption = (story: Story, option: StoryOption): Story => {\r\n  const options = story.options;\r\n  const index = options.findIndex(o => o.id === option.id);\r\n  const updatedOptions = update(index, option, options);\r\n  return { ...story, options: updatedOptions };\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Story, Node, StoryOption, NodeTracker, Verb } from \"./types\";\nimport GraphTab from \"./graph/GraphTab\";\nimport JsonTab from \"./JsonTab\";\nimport { adjust, update } from \"ramda\";\nimport { addNode, updateNode, addOption, updateOption } from \"./StoryUpdater\";\n\ninterface AppState {\n  tab: \"graph\" | \"json\";\n  story: Story;\n  nodeTracker: NodeTracker[];\n}\n\nclass App extends React.Component<{}, AppState> {\n  public state: AppState = {\n    tab: \"graph\",\n    story: {\n      title: \"\",\n      nodes: [\n        { statement: \"\", type: \"Normal\", optionIds: [], id: \"first-node\" }\n      ],\n      options: []\n    },\n    nodeTracker: []\n  };\n\n  private updateTab = (tab: \"graph\" | \"json\") => this.setState({ tab });\n  private updateTitle = (title: string) =>\n    this.setState({ story: { ...this.state.story, title } });\n  private updateNode = (node: Node) => {\n    this.setState({ story: updateNode(this.state.story, node) });\n  };\n\n  private addOrUpdateNodeTracker = (\n    id: string,\n    type: \"Node\" | \"StoryOption\",\n    x: number,\n    y: number\n  ) => {\n    const { nodeTracker } = this.state;\n    const index = nodeTracker.findIndex(n => n.id === id);\n    const node = { id, x, y, type };\n    if (index === -1) {\n      this.setState({ nodeTracker: [...nodeTracker, node] });\n    } else {\n      this.setState({ nodeTracker: update(index, node, nodeTracker) });\n    }\n  };\n\n  private addNode = (option: StoryOption, verb: Verb) => {\n    this.setState({ story: addNode(this.state.story, option, verb) });\n  };\n\n  private addOption = (nodeId: string) => {\n    this.setState({ story: addOption(this.state.story, nodeId) });\n  };\n\n  private updateOption = (option: StoryOption) => {\n    this.setState({ story: updateOption(this.state.story, option) });\n  };\n\n  public render() {\n    const { tab, story, nodeTracker } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"tab-switcher\">\n          <button onClick={() => this.updateTab(\"graph\")}>Graph</button>\n          <button onClick={() => this.updateTab(\"json\")}>JSON</button>\n        </div>\n        <div className={tab === \"graph\" ? \"\" : \"tab--hidden\"}>\n          <GraphTab\n            story={story}\n            nodeTracker={nodeTracker}\n            updateTitle={this.updateTitle}\n            updateNode={this.updateNode}\n            addOption={this.addOption}\n            addNode={this.addNode}\n            updateOption={this.updateOption}\n            addOrUpdateNodeTracker={this.addOrUpdateNodeTracker}\n          />\n        </div>\n        <div className={tab === \"json\" ? \"\" : \"tab--hidden\"}>\n          <JsonTab story={story} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}