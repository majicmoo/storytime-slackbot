{"version":3,"sources":["graph/DraggableDiv.tsx","graph/Node.tsx","graph/Option.tsx","graph/GraphTab.tsx","JsonTab.tsx","StoryUpdater.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DraggableDiv","props","ref","createRef","startDragging","e","current","setState","dragging","relX","pageX","offsetLeft","relY","pageY","offsetTop","stopDragging","drag","state","x","y","this","document","addEventListener","removeEventListener","children","className","style","left","top","onMouseDown","React","Component","NodeComponent","node","updateNode","addOption","value","statement","onChange","target","type","onClick","id","Option","option","updateOption","item","event","GraphTab","story","updateTitle","title","nodes","map","index","Node","key","options","JsonTab","JSON","stringify","nodeId","optionId","uuidv4","find","n","updatedNode","optionIds","updatedOptions","nodeIndex","findIndex","updatedNodes","update","o","App","tab","updateTab","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71158e19.chunk.js","sourcesContent":["import React, { createRef, RefObject, ReactNode } from \"react\";\r\n\r\ninterface DraggableDivProps {\r\n  x: number;\r\n  y: number;\r\n  children: ReactNode;\r\n  className: string;\r\n}\r\n\r\ninterface DraggableDivState {\r\n  x: number;\r\n  y: number;\r\n  dragging: boolean;\r\n  relX: number;\r\n  relY: number;\r\n}\r\n\r\nclass DraggableDiv extends React.Component<\r\n  DraggableDivProps,\r\n  DraggableDivState\r\n> {\r\n  private ref: RefObject<HTMLDivElement> = createRef();\r\n  constructor(props: DraggableDivProps) {\r\n    super(props);\r\n    this.state = { x: props.x, y: props.y, dragging: false, relX: 0, relY: 0 };\r\n  }\r\n\r\n  public componentDidUpdate(\r\n    props: DraggableDivProps,\r\n    state: DraggableDivState\r\n  ) {\r\n    if (this.state.dragging && !state.dragging) {\r\n      document.addEventListener(\"mousemove\", this.drag);\r\n      document.addEventListener(\"mouseup\", this.stopDragging);\r\n    } else if (!this.state.dragging && state.dragging) {\r\n      document.removeEventListener(\"mousemove\", this.drag);\r\n      document.removeEventListener(\"mouseup\", this.stopDragging);\r\n    }\r\n  }\r\n\r\n  private startDragging = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (this.ref.current) {\r\n      this.setState({\r\n        dragging: true,\r\n        relX: e.pageX - this.ref.current.offsetLeft,\r\n        relY: e.pageY - this.ref.current.offsetTop\r\n      });\r\n    }\r\n  };\r\n\r\n  private stopDragging = () => {\r\n    this.setState({ dragging: false });\r\n  };\r\n\r\n  private drag = (e: MouseEvent) => {\r\n    if (this.state.dragging) {\r\n      this.setState({\r\n        x: e.pageX - this.state.relX,\r\n        y: e.pageY - this.state.relY\r\n      });\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    const { children, className } = this.props;\r\n    const { x, y } = this.state;\r\n\r\n    return (\r\n      <div\r\n        className={className}\r\n        style={{ left: `${x}px`, top: `${y}px` }}\r\n        onMouseDown={this.startDragging}\r\n        ref={this.ref}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DraggableDiv;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { Node } from \"../types\";\r\n\r\nimport DraggableDiv from \"./DraggableDiv\";\r\n\r\ninterface NodeProps {\r\n  node: Node;\r\n  updateNode(node: Node): void;\r\n  addOption(nodeId: string): void;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst NodeComponent: FunctionComponent<NodeProps> = ({\r\n  node,\r\n  updateNode,\r\n  addOption,\r\n  x,\r\n  y\r\n}) => (\r\n  <DraggableDiv className=\"node\" x={x} y={y}>\r\n    <input\r\n      value={node.statement}\r\n      onChange={e => updateNode({ ...node, statement: e.target.value })}\r\n    />\r\n    <p>{node.type}</p>\r\n    <button onClick={() => addOption(node.id)}>Add Option</button>\r\n  </DraggableDiv>\r\n);\r\n\r\nexport default NodeComponent;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { StoryOption } from \"../types\";\r\nimport DraggableDiv from \"./DraggableDiv\";\r\n\r\ninterface OptionProps {\r\n  option: StoryOption;\r\n  updateOption(option: StoryOption): void;\r\n  x: number;\r\n  y: number;\r\n}\r\nconst Option: FunctionComponent<OptionProps> = ({\r\n  option,\r\n  updateOption,\r\n  x,\r\n  y\r\n}) => (\r\n  <DraggableDiv className=\"option\" x={x} y={y}>\r\n    <input\r\n      value={option.item}\r\n      onChange={event => updateOption({ ...option, item: event.target.value })}\r\n    />\r\n  </DraggableDiv>\r\n);\r\n\r\nexport default Option;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { Story, Node, StoryOption } from \"../types\";\r\nimport NodeComponent from \"./Node\";\r\nimport Option from \"./Option\";\r\n\r\nimport \"./graph.css\";\r\n\r\ninterface GraphTabProps {\r\n  story: Story;\r\n  updateTitle(title: string): void;\r\n  updateNode(node: Node): void;\r\n  addOption(nodeId: string): void;\r\n  updateOption(option: StoryOption): void;\r\n}\r\n\r\nconst GraphTab: FunctionComponent<GraphTabProps> = ({\r\n  story,\r\n  updateTitle,\r\n  updateNode,\r\n  updateOption,\r\n  addOption\r\n}) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        value={story.title}\r\n        onChange={event => updateTitle(event.target.value)}\r\n      />\r\n      {story.nodes.map((node, index) => (\r\n        <NodeComponent\r\n          key={node.id}\r\n          node={node}\r\n          addOption={addOption}\r\n          updateNode={updateNode}\r\n          x={index}\r\n          y={index}\r\n        />\r\n      ))}\r\n\r\n      {story.options.map((option, index) => (\r\n        <Option\r\n          option={option}\r\n          key={option.id}\r\n          updateOption={updateOption}\r\n          x={index}\r\n          y={index}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphTab;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { Story } from \"./types\";\r\n\r\ninterface JsonTabProps {\r\n  story: Story;\r\n}\r\n\r\nconst JsonTab: FunctionComponent<JsonTabProps> = story => (\r\n  <div>\r\n    <p>{JSON.stringify(story)}</p>\r\n  </div>\r\n);\r\n\r\nexport default JsonTab;\r\n","import { Story, Node, StoryOption } from \"./types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { update } from \"ramda\";\r\n\r\nexport const addNode = (story: Story): Story => {\r\n  const nodes = story.nodes;\r\n  const updatedNodes: Node[] = [\r\n    ...nodes,\r\n    { type: \"Normal\", statement: \"\", id: uuidv4(), optionIds: [] }\r\n  ];\r\n\r\n  return { ...story, nodes: updatedNodes };\r\n};\r\n\r\nexport const addOption = (story: Story, nodeId: string): Story => {\r\n  const optionId = uuidv4();\r\n  const options = story.options;\r\n  const node = story.nodes.find(n => n.id === nodeId)!!; // TODO\r\n  const updatedNode = { ...node, optionIds: [...node.optionIds, optionId] };\r\n  const updatedOptions = [...options, { id: optionId, item: \"\" }];\r\n  return { ...updateNode(story, updatedNode), options: updatedOptions };\r\n};\r\n\r\nexport const updateNode = (story: Story, node: Node): Story => {\r\n  const nodes = story.nodes;\r\n  const nodeIndex = nodes.findIndex(n => n.id === node.id);\r\n  const updatedNodes = update(nodeIndex, node, nodes);\r\n  return { ...story, nodes: updatedNodes };\r\n};\r\n\r\nexport const updateOption = (story: Story, option: StoryOption): Story => {\r\n  const options = story.options;\r\n  const index = options.findIndex(o => o.id === option.id);\r\n  const updatedOptions = update(index, option, options);\r\n  return { ...story, options: updatedOptions };\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Story, Node, StoryOption } from \"./types\";\nimport GraphTab from \"./graph/GraphTab\";\nimport JsonTab from \"./JsonTab\";\nimport { adjust } from \"ramda\";\nimport { addNode, updateNode, addOption, updateOption } from \"./StoryUpdater\";\n\ninterface AppState {\n  tab: \"graph\" | \"json\";\n  story: Story;\n}\n\nclass App extends React.Component<{}, AppState> {\n  public state: AppState = {\n    tab: \"graph\",\n    story: {\n      title: \"\",\n      nodes: [\n        { statement: \"\", type: \"Normal\", optionIds: [], id: \"first-node\" }\n      ],\n      options: []\n    }\n  };\n\n  private updateTab = (tab: \"graph\" | \"json\") => this.setState({ tab });\n  private updateTitle = (title: string) =>\n    this.setState({ story: { ...this.state.story, title } });\n  private updateNode = (node: Node) => {\n    this.setState({ story: updateNode(this.state.story, node) });\n  };\n\n  // private addNode = () => {\n  //   this.setState({ story: addNode(this.state.story) });\n  // };\n  private addOption = (nodeId: string) => {\n    this.setState({ story: addOption(this.state.story, nodeId) });\n  };\n  private updateOption = (option: StoryOption) => {\n    this.setState({ story: updateOption(this.state.story, option) });\n  };\n\n  public render() {\n    const { tab, story } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"tab-switcher\">\n          <button onClick={() => this.updateTab(\"graph\")}>Graph</button>\n          <button onClick={() => this.updateTab(\"json\")}>JSON</button>\n        </div>\n        {tab === \"graph\" && (\n          <GraphTab\n            story={story}\n            updateTitle={this.updateTitle}\n            updateNode={this.updateNode}\n            addOption={this.addOption}\n            updateOption={this.updateOption}\n          />\n        )}\n        {tab === \"json\" && <JsonTab story={story} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}